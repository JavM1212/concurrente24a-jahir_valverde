type goldbach_summary
  numbers = 0;
  sums = 0;
  goldbach_sum*;  /// * array en memoria
end type

type goldbach_sum
  number = 0;
  prime_summands**;  /// ** matriz en memoria
  even_or_odd = 0;  /// Doc: even = 1 AND odd = 2
  invalid = 0;  /// Doc: valid = 0 AND invalid = 1
end type

procedure main()
  input_arr = read_input()

  if sizeof input_arr != NULL
    goldbach_summary = calc_goldbach(input_arr)
    print_goldbach(goldbach_summary);
  else
    print "only integer inputs are accepted"

  return is_valid
end procedure

procedure read_input()
  return stdin()
end procedure

procedure calc_goldbach(input_arr)
goldbach_summary = allocate memory
  goldbach_summary->numbers = length(input_arr)

  goldbach_sum = allocate memory
  for el in input_arr
    goldbach_sum->number = el
    if is_even(el)
      goldbach_sum->even_or_odd = 1  /// Codigo de even
      (goldbach_summary->goldbach_sum).add(even_goldbach(el))
    else
      goldbach_sum->even_or_odd = 0  /// Codigo de odd
      (goldbach_summary->goldbach_sum).add(odd_goldbach(el))
end procedure

procedure even_goldbach(el)
  prime_nums = calc_minor_primes(el)

  for p_num in prime_nums
    for p_num2 in prime_nums
      if p_num + p_num2 = el
        goldbach_sum->prime_summands.add([p_num, p_num2, 0])
        
  for el in goldbach_sum->prime_summands[0]
    if el[0] > el[1]

  return goldbach_sum
end procedure

// procedure odd_goldbach(el) {
//   prime_nums = calc_minor_primes(el)

//   for p_num in prime_nums
//     for p_num2 in prime_nums
//       for p_num3 in prime_nums
//         if p_num + p_num2 + p_num3 = el
//           goldbach_sum->prime_summands.add([p_num, p_num2, 0])
        
//   for el in goldbach_sum->prime_summands[0]
//     if el[0] > el[1]
//       free(el)

//   return goldbach_sum
// end procedure

procedure print_goldbach(goldbach_summary)
  print "Total: " goldbach_summary->numbers " " goldbach_summary->sums "\n\n"

  for el in goldbach_summary->goldbach_sum
    if el->invalid == "1"  // is invalid
      print el->number ": NA"
    else 
      print el->number ": " length(el->prime_summands) " sums"
      if el->even_or_odd = 1  /// is even
        if el->number < 0
          print ":"
          for el2 in el->prime_summands 
            print el2[0] " + " el[1] ","
      else if el->even_or_odd = 0  /// is odd
        if el->number < 0
          print ":"
          for el2 in el->prime_summands 
            print el2[0] " + " el[1] " + " el[2] ","
      else 
        ...  /// es un escenario "Don't Care"
end procedure